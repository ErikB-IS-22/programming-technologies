Цель: научиться работать с OpenAI API, чтобы создать простого текстового ассистента, который может отвечать на ваши вопросы. Однако ввиду того, что OpenAI API недоступен в России, была использована альтернатива https://ai.io.net с моделью deepseek-ai/DeepSeek-R1-0528. Перед началом рабо-ты было создано и активировано виртуальное окружение (рис. 1). 
![Рисунок 1 – Создание виртуального окружения](https://github.com/ErikB-IS-22/programming-technologies/blob/main/students/IS22/BainazarovEI/images/image.png)
На сайте https://ai.io.net был создан API-ключ для работы с моделью (рис. 2). Был создан файл .env для безопасного хранения API-ключа. Также файл .env был добавлен в .gitignore, чтобы ключ не был загружен в репозито-рий. Был создан файл requirements.txt и применена команда pip freeze > requirements.txt, чтобы сохранить список зависимостей (рис. 3).

Рисунок 2 – Создание API-ключа
 
Рисунок 3 – Список зависимостей
	Далее был создан файл main.py и написан базовый код. Здесь идёт обращение к URL для доступа к API (url), обращение к модели (model), установка системных промптов (messages) и получение API-ключа (Authorization) (рис. 4). Был таже написан код для интерактивного общения, чтобы пользователь мог общаться с нейросетью. Данный код работает так (рис. 5):
•	Программа запустится, только если её вызвать напрямую;
•	Показываем пользователю подсказку;
•	Запускаем бесконечный цикл общения;
•	Если введено exit – выходим;
•	Иначе отправляем запрос в API и выводим ответ.
 
Рисунок 4 – Базовый код для обращению к API
 
Рисунок 5 – Базовый код для обращению к API
Были выполнены задания лабораторной работы:
1.	Реализовать использование системного промпта через переменную окружения .env, либо через ручной ввод/выбор промпта и его сохраниение в базу данных при выборе соответствующей опции в терминале;
2.	Проверить разные значения параметра temperature в настройках языковой модели, проанализировать поведение языковой модели, результат отразить в отчёте;
3.	Реализовать ведение истории диалога (контекста переписки с ассистентом), чтобы ИИ помнил, о чём пользователь с ним разговаривал. Длину истории сообщений ограничить до 6 последних сообщений (3 пользовательских, 3 от ИИ).
Для выполнения задания код был доработан. Были добавлены следующие функции:
•	init_db() – Инициализация базы данных;
•	save_system_prompt(name, content) – Сохранение системного промпта;
•	get_active_system_prompt() – Получение активного системного промпта;
•	save_message(role, content) – Сохранение сообщения в историю;
•	get_recent_history() – Получение последних 6 сообщений (3 пользователя + 3 ассистента);
•	clear_history() – Очистка истории диалога;
•	manage_system_prompts() – Управление системными промптами;
•	view_prompts() – Просмотр сохранённых промптов;
•	add_prompt() – Добавление нового системного промпта;
•	activate_prompt() – Активировать системный промпт.
Также был добавлен параметр temperature. При установлении значений ниже 1, изменений в работе нейросети не наблюдалось, однако при установлении значений выше 1 нейросеть обрабатывала промпт бесконечно долго.
Был установлен и активирован системный промпт «You are Erik» (рис. 6). После доработки программа была проверена с помощью простых промптов. Видно, что нейросеть запоминает историю сообщений и обращается к пользователю Эрик (рис. 7).
 
Рисунок 6 – Установка нового системного промпта
 
 
 
 
 
Рисунок 7 – Проверка нейросети после доработки кода

